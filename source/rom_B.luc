module rom_B (
    input address[6],
    output element[32]
) {
    
    sig b[32]
    
    always {
        case (address) {
      0: b = 32b00000101; // ADD: positive numbers, A=3, B=5, output=8
      1: b = 32b00000001; // ADD: check for overflow, A=MAX_VALUE(+ve), B=1, output=MIN_VALUE
      2: b = 32b00000011; // SUB: normal subtraction, A=7, B=3, output=4
      3: b = 32b00000001; // SUB: check for underflow, A=MIN_VALUE, B=1, output=? done                !!! check 
      4: b = 32h7FFFFFFF; // SUB: check Boundary Values(), A=0, B=MAX_VALUE, output=negative MAX_VALUE
      5: b = 32b00000101; // MUL: Positive values, A=8, B=5, output=40 done
      6: b = 32b00000000; // MUL: zero multiplication, A=32, B=0, output=0 done
      7: b = 32b00000001; // MUL: multiplication by 1, A=MAX_VALUE, B=1, output=?                    !!! check
      8: b = 32b00000000; // AND: with zero, A=110, B=0, output=0 done
      9: b = 32hFFFFFF55; // AND: with complements, A=170, B=-171(FFFFFF55), ouput=0  
      10: b = 32hFFFFFFFF; // AND: with ones, A=170, B=-1(32hFFFFFFFF), output=170
      11: b = 32b00000000; //OR: with zeroes, A=170, B=0, ouput=170
      12: b = 32hFFFFFFFF; // OR: with ones, A=170, B=-1(32hFFFFFFFF), ouput=MAX_VALUE
      13: b = 32b10101010; // OR: with self, check for identity, A=170, B=170, ouput=170
      14: b = 32b00000000; // XOR: identity, A=170, B=0, ouput=170
      15: b = 32hFFFFFF55; // XOR: complement, A=170, B=-171(FFFFFF55), ouput=MAX_VALUE    
      16: b = 32b00000101; // LDR: i think outputs A, A=170, B=5, output=170                !!! check 
      17: b = 32b00000000; // SHL: zero shift, A=170, B=0, output=170
      18: b = 32b00011111; // SHL: max shift, A=-1, B=31, output=1 done
      19: b = 32b00000100; // SHL: boundary A=0x0F00000F, B=4, output=0xF00000F0
      20: b = 32b00000000; // SHR: zero shift, A=85, B=0, output=85 done
      21: b = 32b00011111; // SHR: max shift, A=1, B=31, output=0x80000000
      22: b = 32b00000100; // SRA: shift right with sign complement, A=0x80000000, B=4, output=0xF8000000
      23: b = 32b00000101; // CMPEQ: true, A=5, B=5, output=1
      24: b = 32b00000101; // CMPEQ: false, A=3, B=5, output=0
      25: b = 32b00000101; // CMPLT: true, A=3, B=5, output=1
      26: b = 32b00000101; // CMPLT: false if A greater than B, A=16, B=5, output=0
      27: b = 32b00000101; // CMPLT: false if A = B, A=5, B=5, output=0
      28: b = 32b00000101; // CMPLE: true, A=3, B=5, output=1
      29: b = 32b00000101; // CMPLE: false, A=40, B=5, output=0
      30: b = 32b00000101; // Division: normal div, A=40, B=5, output=8
      default: b = 32b0000000;
        }
        element = b
    }
}